import React, { useState, useEffect, useMemo } from 'react';
import {
  Plus,
  Trash2,
  Calendar,
  TrendingUp,
  Download,
  Upload,
  ChevronLeft,
  ChevronRight,
  BarChart3,
  PieChart,
  Save,
  FileDown,
  Package,
  X,
  Check,
  AlertCircle,
} from 'lucide-react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
} from 'recharts';
import { alimentiAPI } from './services/api';

// ==================== DATABASE ALIMENTI ====================
const ALIMENTI_DATABASE = {
  // LEGUMI
  'Lenticchie comuni': {
    categoria: 'pranzo',
    proteine: 9.0,
    carboidrati: 20.8,
    grassi: 0.4,
    fibre: 7.9,
    ferro: 3.3,
    calcio: 19,
    vitB12: 0,
    vitB2: 0.07,
    vitD: 0,
    omega3: 0.04,
    iodio: 2,
    zinco: 1.3,
    calorie: 116,
    porzione: 150,
  },
  'Lenticchie rosse decorticate': {
    categoria: 'pranzo',
    proteine: 7.6,
    carboidrati: 20.1,
    grassi: 0.4,
    fibre: 3.9,
    ferro: 2.4,
    calcio: 14,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.03,
    iodio: 1.5,
    zinco: 1.1,
    calorie: 116,
    porzione: 150,
  },
  Ceci: {
    categoria: 'pranzo',
    proteine: 8.9,
    carboidrati: 27.4,
    grassi: 2.6,
    fibre: 7.6,
    ferro: 2.9,
    calcio: 49,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.08,
    iodio: 1.8,
    zinco: 1.5,
    calorie: 164,
    porzione: 150,
  },
  'Fagioli borlotti': {
    categoria: 'pranzo',
    proteine: 8.0,
    carboidrati: 22.5,
    grassi: 0.5,
    fibre: 8.7,
    ferro: 2.5,
    calcio: 50,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.15,
    iodio: 2,
    zinco: 1.0,
    calorie: 127,
    porzione: 150,
  },
  'Fagioli neri': {
    categoria: 'pranzo',
    proteine: 8.9,
    carboidrati: 23.7,
    grassi: 0.5,
    fibre: 8.7,
    ferro: 2.1,
    calcio: 27,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.18,
    iodio: 1.5,
    zinco: 1.2,
    calorie: 132,
    porzione: 150,
  },
  'Fagioli cannellini': {
    categoria: 'pranzo',
    proteine: 8.4,
    carboidrati: 21.2,
    grassi: 0.6,
    fibre: 6.8,
    ferro: 2.8,
    calcio: 71,
    vitB12: 0,
    vitB2: 0.05,
    vitD: 0,
    omega3: 0.12,
    iodio: 1.8,
    zinco: 1.4,
    calorie: 128,
    porzione: 150,
  },
  'Edamame (soia verde)': {
    categoria: 'pranzo',
    proteine: 11.0,
    carboidrati: 8.4,
    grassi: 5.2,
    fibre: 5.2,
    ferro: 2.3,
    calcio: 63,
    vitB12: 0,
    vitB2: 0.14,
    vitD: 0,
    omega3: 0.56,
    iodio: 1.5,
    zinco: 1.4,
    calorie: 121,
    porzione: 150,
  },
  'Piselli secchi': {
    categoria: 'pranzo',
    proteine: 8.3,
    carboidrati: 21.1,
    grassi: 0.8,
    fibre: 8.3,
    ferro: 1.9,
    calcio: 15,
    vitB12: 0,
    vitB2: 0.08,
    vitD: 0,
    omega3: 0.04,
    iodio: 1.2,
    zinco: 1.2,
    calorie: 118,
    porzione: 150,
  },
  Lupini: {
    categoria: 'pranzo',
    proteine: 16.4,
    carboidrati: 7.2,
    grassi: 2.9,
    fibre: 2.8,
    ferro: 0.9,
    calcio: 60,
    vitB12: 0,
    vitB2: 0.02,
    vitD: 0,
    omega3: 0.05,
    iodio: 2,
    zinco: 1.2,
    calorie: 116,
    porzione: 100,
  },
  'Soia gialla': {
    categoria: 'pranzo',
    proteine: 16.6,
    carboidrati: 9.9,
    grassi: 9.0,
    fibre: 6.0,
    ferro: 5.1,
    calcio: 102,
    vitB12: 0,
    vitB2: 0.28,
    vitD: 0,
    omega3: 1.02,
    iodio: 2,
    zinco: 2.0,
    calorie: 172,
    porzione: 150,
  },

  // CEREALI
  'Pasta integrale': {
    categoria: 'pranzo',
    proteine: 4.5,
    carboidrati: 26.5,
    grassi: 0.6,
    fibre: 3.5,
    ferro: 1.3,
    calcio: 15,
    vitB12: 0,
    vitB2: 0.05,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.5,
    zinco: 1.0,
    calorie: 124,
    porzione: 80,
  },
  'Pasta bianca': {
    categoria: 'pranzo',
    proteine: 5.0,
    carboidrati: 30.9,
    grassi: 0.9,
    fibre: 1.8,
    ferro: 0.5,
    calcio: 7,
    vitB12: 0,
    vitB2: 0.02,
    vitD: 0,
    omega3: 0.01,
    iodio: 0.3,
    zinco: 0.5,
    calorie: 158,
    porzione: 80,
  },
  'Riso integrale': {
    categoria: 'pranzo',
    proteine: 2.6,
    carboidrati: 23.0,
    grassi: 0.9,
    fibre: 1.8,
    ferro: 0.4,
    calcio: 3,
    vitB12: 0,
    vitB2: 0.01,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.2,
    zinco: 0.6,
    calorie: 111,
    porzione: 80,
  },
  'Riso bianco': {
    categoria: 'pranzo',
    proteine: 2.7,
    carboidrati: 28.2,
    grassi: 0.3,
    fibre: 0.4,
    ferro: 0.2,
    calcio: 3,
    vitB12: 0,
    vitB2: 0.01,
    vitD: 0,
    omega3: 0.01,
    iodio: 0.1,
    zinco: 0.5,
    calorie: 130,
    porzione: 80,
  },
  Quinoa: {
    categoria: 'pranzo',
    proteine: 4.4,
    carboidrati: 21.3,
    grassi: 1.9,
    fibre: 2.8,
    ferro: 1.5,
    calcio: 17,
    vitB12: 0,
    vitB2: 0.11,
    vitD: 0,
    omega3: 0.09,
    iodio: 0.3,
    zinco: 1.1,
    calorie: 120,
    porzione: 80,
  },
  'Farro decorticato': {
    categoria: 'pranzo',
    proteine: 5.5,
    carboidrati: 26.4,
    grassi: 1.4,
    fibre: 3.5,
    ferro: 1.7,
    calcio: 16,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.04,
    iodio: 0.4,
    zinco: 1.3,
    calorie: 140,
    porzione: 80,
  },
  'Orzo perlato': {
    categoria: 'pranzo',
    proteine: 2.3,
    carboidrati: 28.2,
    grassi: 0.4,
    fibre: 3.8,
    ferro: 1.0,
    calcio: 11,
    vitB12: 0,
    vitB2: 0.04,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.3,
    zinco: 0.8,
    calorie: 123,
    porzione: 80,
  },
  'Cous cous integrale': {
    categoria: 'pranzo',
    proteine: 3.8,
    carboidrati: 23.2,
    grassi: 0.3,
    fibre: 2.2,
    ferro: 0.4,
    calcio: 8,
    vitB12: 0,
    vitB2: 0.03,
    vitD: 0,
    omega3: 0.01,
    iodio: 0.2,
    zinco: 0.5,
    calorie: 112,
    porzione: 80,
  },
  Miglio: {
    categoria: 'pranzo',
    proteine: 3.5,
    carboidrati: 23.7,
    grassi: 1.0,
    fibre: 1.3,
    ferro: 0.6,
    calcio: 3,
    vitB12: 0,
    vitB2: 0.08,
    vitD: 0,
    omega3: 0.03,
    iodio: 0.1,
    zinco: 0.9,
    calorie: 119,
    porzione: 80,
  },
  'Grano saraceno': {
    categoria: 'pranzo',
    proteine: 3.4,
    carboidrati: 19.9,
    grassi: 0.9,
    fibre: 2.7,
    ferro: 0.8,
    calcio: 7,
    vitB12: 0,
    vitB2: 0.04,
    vitD: 0,
    omega3: 0.04,
    iodio: 0.2,
    zinco: 0.8,
    calorie: 92,
    porzione: 80,
  },
  Polenta: {
    categoria: 'pranzo',
    proteine: 2.2,
    carboidrati: 21.8,
    grassi: 0.9,
    fibre: 1.7,
    ferro: 0.5,
    calcio: 2,
    vitB12: 0,
    vitB2: 0.02,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.1,
    zinco: 0.4,
    calorie: 85,
    porzione: 150,
  },

  // COLAZIONE
  Avena: {
    categoria: 'colazione',
    proteine: 2.5,
    carboidrati: 12.0,
    grassi: 1.4,
    fibre: 1.7,
    ferro: 0.8,
    calcio: 9,
    vitB12: 0,
    vitB2: 0.02,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.1,
    zinco: 0.6,
    calorie: 71,
    porzione: 40,
  },
  'Pane integrale': {
    categoria: 'colazione',
    proteine: 7.5,
    carboidrati: 42.0,
    grassi: 2.5,
    fibre: 6.5,
    ferro: 2.1,
    calcio: 45,
    vitB12: 0,
    vitB2: 0.12,
    vitD: 0,
    omega3: 0.08,
    iodio: 0.5,
    zinco: 1.5,
    calorie: 224,
    porzione: 60,
  },
  'Pane bianco': {
    categoria: 'colazione',
    proteine: 8.0,
    carboidrati: 49.0,
    grassi: 1.0,
    fibre: 2.7,
    ferro: 1.2,
    calcio: 20,
    vitB12: 0,
    vitB2: 0.08,
    vitD: 0,
    omega3: 0.02,
    iodio: 0.3,
    zinco: 0.7,
    calorie: 265,
    porzione: 60,
  },
  'Latte di soia': {
    categoria: 'colazione',
    proteine: 3.3,
    carboidrati: 2.2,
    grassi: 1.8,
    fibre: 0.5,
    ferro: 0.5,
    calcio: 120,
    vitB12: 0.38,
    vitB2: 0.18,
    vitD: 0.75,
    omega3: 0.08,
    iodio: 8,
    zinco: 0.4,
    calorie: 40,
    porzione: 200,
  },
  'Latte di avena': {
    categoria: 'colazione',
    proteine: 1.0,
    carboidrati: 6.5,
    grassi: 1.5,
    fibre: 0.8,
    ferro: 0.3,
    calcio: 120,
    vitB12: 0.38,
    vitB2: 0.07,
    vitD: 0.75,
    omega3: 0.02,
    iodio: 8,
    zinco: 0.3,
    calorie: 46,
    porzione: 200,
  },
  'Latte di mandorla': {
    categoria: 'colazione',
    proteine: 0.5,
    carboidrati: 3.0,
    grassi: 1.1,
    fibre: 0.4,
    ferro: 0.2,
    calcio: 120,
    vitB12: 0.38,
    vitB2: 0.07,
    vitD: 0.75,
    omega3: 0.01,
    iodio: 8,
    zinco: 0.2,
    calorie: 24,
    porzione: 200,
  },
  'Yogurt soia naturale': {
    categoria: 'colazione',
    proteine: 4.0,
    carboidrati: 4.5,
    grassi: 2.0,
    fibre: 1.2,
    ferro: 0.7,
    calcio: 130,
    vitB12: 0.3,
    vitB2: 0.2,
    vitD: 0,
    omega3: 0.1,
    iodio: 5,
    zinco: 0.5,
    calorie: 55,
    porzione: 125,
  },
  Mandorle: {
    categoria: 'colazione',
    proteine: 21.2,
    carboidrati: 9.5,
    grassi: 55.0,
    fibre: 12.2,
    ferro: 3.7,
    calcio: 264,
    vitB12: 0,
    vitB2: 1.0,
    vitD: 0,
    omega3: 0.4,
    iodio: 1,
    zinco: 3.1,
    calorie: 579,
    porzione: 30,
  },
  Noci: {
    categoria: 'colazione',
    proteine: 15.2,
    carboidrati: 7.0,
    grassi: 65.2,
    fibre: 6.7,
    ferro: 2.9,
    calcio: 98,
    vitB12: 0,
    vitB2: 0.15,
    vitD: 0,
    omega3: 9.08,
    iodio: 1,
    zinco: 3.1,
    calorie: 654,
    porzione: 30,
  },
  Nocciole: {
    categoria: 'colazione',
    proteine: 14.9,
    carboidrati: 6.1,
    grassi: 60.8,
    fibre: 9.7,
    ferro: 4.7,
    calcio: 114,
    vitB12: 0,
    vitB2: 0.11,
    vitD: 0,
    omega3: 0.09,
    iodio: 1,
    zinco: 2.4,
    calorie: 628,
    porzione: 30,
  },
  'Semi di chia': {
    categoria: 'colazione',
    proteine: 16.5,
    carboidrati: 7.7,
    grassi: 30.7,
    fibre: 34.4,
    ferro: 7.7,
    calcio: 631,
    vitB12: 0,
    vitB2: 0.17,
    vitD: 0,
    omega3: 17.83,
    iodio: 1,
    zinco: 4.6,
    calorie: 486,
    porzione: 20,
  },
  Marmellata: {
    categoria: 'colazione',
    proteine: 0.3,
    carboidrati: 60.0,
    grassi: 0.1,
    fibre: 1.2,
    ferro: 0.4,
    calcio: 18,
    vitB12: 0,
    vitB2: 0.03,
    vitD: 0,
    omega3: 0,
    iodio: 0.1,
    zinco: 0.1,
    calorie: 250,
    porzione: 20,
  },
  Banana: {
    categoria: 'colazione',
    proteine: 1.1,
    carboidrati: 23.0,
    grassi: 0.3,
    fibre: 2.6,
    ferro: 0.3,
    calcio: 5,
    vitB12: 0,
    vitB2: 0.07,
    vitD: 0,
    omega3: 0.03,
    iodio: 1,
    zinco: 0.2,
    calorie: 89,
    porzione: 120,
  },

  // VERDURE
  Spinaci: {
    categoria: 'verdure',
    proteine: 2.9,
    carboidrati: 3.6,
    grassi: 0.4,
    fibre: 2.2,
    ferro: 2.7,
    calcio: 99,
    vitB12: 0,
    vitB2: 0.19,
    vitD: 0,
    omega3: 0.14,
    iodio: 12,
    zinco: 0.5,
    calorie: 23,
    porzione: 200,
  },
  Broccoli: {
    categoria: 'verdure',
    proteine: 2.8,
    carboidrati: 7.0,
    grassi: 0.4,
    fibre: 2.6,
    ferro: 0.7,
    calcio: 47,
    vitB12: 0,
    vitB2: 0.12,
    vitD: 0,
    omega3: 0.02,
    iodio: 15,
    zinco: 0.4,
    calorie: 34,
    porzione: 200,
  },
  Zucchine: {
    categoria: 'verdure',
    proteine: 1.2,
    carboidrati: 3.1,
    grassi: 0.3,
    fibre: 1.0,
    ferro: 0.4,
    calcio: 16,
    vitB12: 0,
    vitB2: 0.09,
    vitD: 0,
    omega3: 0.05,
    iodio: 3,
    zinco: 0.3,
    calorie: 17,
    porzione: 200,
  },
  Pomodori: {
    categoria: 'verdure',
    proteine: 0.9,
    carboidrati: 3.9,
    grassi: 0.2,
    fibre: 1.2,
    ferro: 0.3,
    calcio: 10,
    vitB12: 0,
    vitB2: 0.02,
    vitD: 0,
    omega3: 0.01,
    iodio: 1,
    zinco: 0.2,
    calorie: 18,
    porzione: 200,
  },
  Carote: {
    categoria: 'verdure',
    proteine: 0.9,
    carboidrati: 9.6,
    grassi: 0.2,
    fibre: 2.8,
    ferro: 0.3,
    calcio: 33,
    vitB12: 0,
    vitB2: 0.06,
    vitD: 0,
    omega3: 0.01,
    iodio: 1,
    zinco: 0.2,
    calorie: 41,
    porzione: 150,
  },
  'Cavolo riccio': {
    categoria: 'verdure',
    proteine: 4.3,
    carboidrati: 8.8,
    grassi: 0.9,
    fibre: 3.6,
    ferro: 1.5,
    calcio: 150,
    vitB12: 0,
    vitB2: 0.13,
    vitD: 0,
    omega3: 0.18,
    iodio: 90,
    zinco: 0.6,
    calorie: 49,
    porzione: 100,
  },
  Rucola: {
    categoria: 'verdure',
    proteine: 2.6,
    carboidrati: 3.7,
    grassi: 0.7,
    fibre: 1.6,
    ferro: 1.5,
    calcio: 160,
    vitB12: 0,
    vitB2: 0.09,
    vitD: 0,
    omega3: 0.17,
    iodio: 8,
    zinco: 0.5,
    calorie: 25,
    porzione: 80,
  },

  // CONDIMENTI
  'Olio extravergine oliva': {
    categoria: 'condimenti',
    proteine: 0,
    carboidrati: 0,
    grassi: 100.0,
    fibre: 0,
    ferro: 0.4,
    calcio: 1,
    vitB12: 0,
    vitB2: 0,
    vitD: 0,
    omega3: 0.76,
    iodio: 0,
    zinco: 0,
    calorie: 884,
    porzione: 10,
  },
  'Olio di semi lino': {
    categoria: 'condimenti',
    proteine: 0,
    carboidrati: 0,
    grassi: 100.0,
    fibre: 0,
    ferro: 0.1,
    calcio: 0,
    vitB12: 0,
    vitB2: 0,
    vitD: 0,
    omega3: 53.37,
    iodio: 0,
    zinco: 0,
    calorie: 884,
    porzione: 5,
  },
  'Semi di lino macinati': {
    categoria: 'condimenti',
    proteine: 18.3,
    carboidrati: 1.6,
    grassi: 42.2,
    fibre: 27.3,
    ferro: 5.7,
    calcio: 255,
    vitB12: 0,
    vitB2: 0.16,
    vitD: 0,
    omega3: 22.81,
    iodio: 1,
    zinco: 4.3,
    calorie: 534,
    porzione: 10,
  },
  'Semi di sesamo': {
    categoria: 'condimenti',
    proteine: 17.7,
    carboidrati: 11.7,
    grassi: 49.7,
    fibre: 11.8,
    ferro: 14.6,
    calcio: 975,
    vitB12: 0,
    vitB2: 0.25,
    vitD: 0,
    omega3: 0.37,
    iodio: 1,
    zinco: 7.8,
    calorie: 573,
    porzione: 10,
  },
  'Lievito nutrizionale': {
    categoria: 'condimenti',
    proteine: 50.0,
    carboidrati: 36.0,
    grassi: 7.0,
    fibre: 26.0,
    ferro: 2.1,
    calcio: 60,
    vitB12: 8.0,
    vitB2: 17.6,
    vitD: 0,
    omega3: 0,
    iodio: 0,
    zinco: 7.8,
    calorie: 325,
    porzione: 5,
  },
  Tofu: {
    categoria: 'condimenti',
    proteine: 8.0,
    carboidrati: 1.9,
    grassi: 4.8,
    fibre: 0.3,
    ferro: 5.4,
    calcio: 350,
    vitB12: 0,
    vitB2: 0.05,
    vitD: 0,
    omega3: 0.58,
    iodio: 1,
    zinco: 0.8,
    calorie: 76,
    porzione: 100,
  },
  Tempeh: {
    categoria: 'condimenti',
    proteine: 19.0,
    carboidrati: 9.0,
    grassi: 11.0,
    fibre: 6.0,
    ferro: 2.7,
    calcio: 111,
    vitB12: 0.08,
    vitB2: 0.36,
    vitD: 0,
    omega3: 0.4,
    iodio: 1,
    zinco: 1.8,
    calorie: 193,
    porzione: 100,
  },
};

// ==================== INTEGRATORI DATABASE ====================
const INTEGRATORI_DATABASE = {
  'Vitamina B12 (1000µg)': { vitB12: 1000, categoria: 'integratore' },
  'Vitamina D3 (2000 UI)': { vitD: 50, categoria: 'integratore' },
  'Omega-3 DHA+EPA': { omega3: 1.0, categoria: 'integratore' },
  'Ferro (14mg)': { ferro: 14, categoria: 'integratore' },
  'Zinco (10mg)': { zinco: 10, categoria: 'integratore' },
  'Iodio (150µg)': { iodio: 150, categoria: 'integratore' },
  'Calcio (500mg)': { calcio: 500, categoria: 'integratore' },
  'Multivitaminico Vegano': {
    vitB12: 25,
    vitB2: 1.6,
    vitD: 20,
    ferro: 7,
    zinco: 5,
    iodio: 75,
    calcio: 200,
    categoria: 'integratore',
  },
};

// ==================== COMPONENTE PRINCIPALE ====================
const VeganNutritionTrackerComplete = () => {
  // ========== STATE ==========
  const [dataCorrente, setDataCorrente] = useState(
    new Date().toISOString().split('T')[0]
  );
  const [giornate, setGiornate] = useState({});
  const [peso, setPeso] = useState(70);
  const [livelloAttivita, setLivelloAttivita] = useState(1.55);
  const [obiettivi, setObiettivi] = useState(null);
  const [modalAperto, setModalAperto] = useState(null);
  const [pastoSelezionato, setPastoSelezionato] = useState('colazione');
  const [alimentoSelezionato, setAlimentoSelezionato] = useState('');
  const [quantita, setQuantita] = useState('');
  const [integratoreSel, setIntegratoreSel] = useState('');
  const [ricetteSalvate, setRicetteSalvate] = useState({});
  const [nomeRicetta, setNomeRicetta] = useState('');
  const [vistaAttiva, setVistaAttiva] = useState('oggi'); // oggi, storico, grafici, export

  // Carica dati da localStorage
  useEffect(() => {
    const saved = localStorage.getItem('vegan-tracker-data');
    if (saved) {
      const data = JSON.parse(saved);
      setGiornate(data.giornate || {});
      setPeso(data.peso || 70);
      setLivelloAttivita(data.livelloAttivita || 1.55);
      setRicetteSalvate(data.ricette || {});
    }
  }, []);

  // Salva dati in localStorage
  useEffect(() => {
    const data = {
      giornate,
      peso,
      livelloAttivita,
      ricette: ricetteSalvate,
      ultimoAggiornamento: new Date().toISOString(),
    };
    localStorage.setItem('vegan-tracker-data', JSON.stringify(data));
  }, [giornate, peso, livelloAttivita, ricetteSalvate]);

  // Calcola obiettivi
  useEffect(() => {
    const calcolati = {
      proteine: peso * 1.1,
      carboidrati: peso * 4,
      grassi: peso * 0.8,
      fibre: 35,
      ferro: 18,
      calcio: 1000,
      vitB12: 2.4,
      vitB2: 1.3,
      vitD: 15,
      omega3: 1.6,
      iodio: 150,
      zinco: 11,
      calorie: peso * 24 * livelloAttivita,
    };
    setObiettivi(calcolati);
  }, [peso, livelloAttivita]);

  // Giornata corrente
  const giornataCorrente = useMemo(() => {
    if (!giornate[dataCorrente]) {
      return {
        data: dataCorrente,
        pasti: {
          colazione: [],
          spuntinoMattina: [],
          pranzo: [],
          spuntinoPomeriggio: [],
          cena: [],
        },
        integratori: {
          colazione: [],
          spuntinoMattina: [],
          pranzo: [],
          spuntinoPomeriggio: [],
          cena: [],
        },
      };
    }
    return giornate[dataCorrente];
  }, [giornate, dataCorrente]);

  // Calcola totali giornalieri
  const totaliGiornalieri = useMemo(() => {
    const totali = {
      proteine: 0,
      carboidrati: 0,
      grassi: 0,
      fibre: 0,
      ferro: 0,
      calcio: 0,
      vitB12: 0,
      vitB2: 0,
      vitD: 0,
      omega3: 0,
      iodio: 0,
      zinco: 0,
      calorie: 0,
    };

    // Somma alimenti
    Object.values(giornataCorrente.pasti).forEach((pasto) => {
      pasto.forEach((alimento) => {
        Object.keys(totali).forEach((nutriente) => {
          totali[nutriente] += alimento[nutriente] || 0;
        });
      });
    });

    // Somma integratori
    Object.values(giornataCorrente.integratori).forEach((pasto) => {
      pasto.forEach((integratore) => {
        Object.keys(totali).forEach((nutriente) => {
          totali[nutriente] += integratore[nutriente] || 0;
        });
      });
    });

    // Calcola complementarità proteica
    const proteineLegumi = Object.values(giornataCorrente.pasti)
      .flat()
      .filter(
        (a) =>
          a.categoria === 'pranzo' &&
          a.nome.match(/lenticchie|ceci|fagioli|piselli|lupini|soia|edamame/i)
      )
      .reduce((sum, a) => sum + a.proteine, 0);

    const proteineCereali = Object.values(giornataCorrente.pasti)
      .flat()
      .filter(
        (a) =>
          a.categoria === 'pranzo' &&
          a.nome.match(
            /pasta|riso|quinoa|farro|orzo|cous|miglio|grano|polenta/i
          )
      )
      .reduce((sum, a) => sum + a.proteine, 0);

    if (proteineLegumi > 0 && proteineCereali > 0) {
      const bonus = Math.min(proteineLegumi, proteineCereali) * 0.23;
      totali.proteineComplementarita = bonus;
      totali.proteineEffettive = totali.proteine + bonus;
    } else {
      totali.proteineEffettive = totali.proteine;
    }

    return totali;
  }, [giornataCorrente]);

  // ========== FUNZIONI ==========
  const aggiungiAlimento = () => {
    if (!alimentoSelezionato || !quantita) return;

    const alimento = ALIMENTI_DATABASE[alimentoSelezionato];
    const fattore = parseFloat(quantita) / 100;

    const alimentoCalcolato = {
      nome: alimentoSelezionato,
      categoria: alimento.categoria,
      quantita: parseFloat(quantita),
      proteine: alimento.proteine * fattore,
      carboidrati: alimento.carboidrati * fattore,
      grassi: alimento.grassi * fattore,
      fibre: alimento.fibre * fattore,
      ferro: alimento.ferro * fattore,
      calcio: alimento.calcio * fattore,
      vitB12: alimento.vitB12 * fattore,
      vitB2: alimento.vitB2 * fattore,
      vitD: alimento.vitD * fattore,
      omega3: alimento.omega3 * fattore,
      iodio: alimento.iodio * fattore,
      zinco: alimento.zinco * fattore,
      calorie: alimento.calorie * fattore,
    };

    setGiornate((prev) => ({
      ...prev,
      [dataCorrente]: {
        ...giornataCorrente,
        pasti: {
          ...giornataCorrente.pasti,
          [pastoSelezionato]: [
            ...giornataCorrente.pasti[pastoSelezionato],
            alimentoCalcolato,
          ],
        },
      },
    }));

    setAlimentoSelezionato('');
    setQuantita('');
    setModalAperto(null);
  };

  const rimuoviAlimento = (pasto, index) => {
    setGiornate((prev) => ({
      ...prev,
      [dataCorrente]: {
        ...giornataCorrente,
        pasti: {
          ...giornataCorrente.pasti,
          [pasto]: giornataCorrente.pasti[pasto].filter((_, i) => i !== index),
        },
      },
    }));
  };

  const aggiungiIntegratore = () => {
    if (!integratoreSel) return;

    const integratore = {
      nome: integratoreSel,
      ...INTEGRATORI_DATABASE[integratoreSel],
    };

    setGiornate((prev) => ({
      ...prev,
      [dataCorrente]: {
        ...giornataCorrente,
        integratori: {
          ...giornataCorrente.integratori,
          [pastoSelezionato]: [
            ...giornataCorrente.integratori[pastoSelezionato],
            integratore,
          ],
        },
      },
    }));

    setIntegratoreSel('');
    setModalAperto(null);
  };

  const salvaRicetta = () => {
    if (!nomeRicetta) return;
    setRicetteSalvate((prev) => ({
      ...prev,
      [nomeRicetta]: giornataCorrente.pasti[pastoSelezionato],
    }));
    setNomeRicetta('');
    setModalAperto(null);
  };

  const caricaRicetta = (nomeRicetta) => {
    const ricetta = ricetteSalvate[nomeRicetta];
    setGiornate((prev) => ({
      ...prev,
      [dataCorrente]: {
        ...giornataCorrente,
        pasti: {
          ...giornataCorrente.pasti,
          [pastoSelezionato]: [
            ...giornataCorrente.pasti[pastoSelezionato],
            ...ricetta,
          ],
        },
      },
    }));
    setModalAperto(null);
  };

  const cambiaGiorno = (offset) => {
    const data = new Date(dataCorrente);
    data.setDate(data.getDate() + offset);
    setDataCorrente(data.toISOString().split('T')[0]);
  };

  const copiaGiornoPrecedente = () => {
    const ieri = new Date(dataCorrente);
    ieri.setDate(ieri.getDate() - 1);
    const dataIeri = ieri.toISOString().split('T')[0];

    if (giornate[dataIeri]) {
      setGiornate((prev) => ({
        ...prev,
        [dataCorrente]: JSON.parse(JSON.stringify(giornate[dataIeri])),
      }));
    }
  };

  const exportJSON = () => {
    const data = {
      giornate,
      peso,
      livelloAttivita,
      ricette: ricetteSalvate,
      dataExport: new Date().toISOString(),
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json',
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `nutrition-tracker-${
      new Date().toISOString().split('T')[0]
    }.json`;
    a.click();
  };

  const importJSON = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const data = JSON.parse(event.target.result);
        setGiornate(data.giornate || {});
        setPeso(data.peso || 70);
        setLivelloAttivita(data.livelloAttivita || 1.55);
        setRicetteSalvate(data.ricette || {});
        alert('✅ Dati importati con successo!');
      } catch (err) {
        alert("❌ Errore nell'importazione del file");
      }
    };
    reader.readAsText(file);
  };

  // Dati per grafici (ultimi 7 giorni)
  const datiGrafici = useMemo(() => {
    const ultimiGiorni = [];
    for (let i = 6; i >= 0; i--) {
      const data = new Date();
      data.setDate(data.getDate() - i);
      const dataStr = data.toISOString().split('T')[0];

      const giornata = giornate[dataStr];
      if (giornata) {
        // Calcola totali per quel giorno
        const totali = { proteine: 0, calorie: 0, ferro: 0, calcio: 0 };
        Object.values(giornata.pasti).forEach((pasto) => {
          pasto.forEach((alimento) => {
            totali.proteine += alimento.proteine || 0;
            totali.calorie += alimento.calorie || 0;
            totali.ferro += alimento.ferro || 0;
            totali.calcio += alimento.calcio || 0;
          });
        });
        ultimiGiorni.push({
          data: data.toLocaleDateString('it-IT', {
            day: '2-digit',
            month: '2-digit',
          }),
          ...totali,
        });
      } else {
        ultimiGiorni.push({
          data: data.toLocaleDateString('it-IT', {
            day: '2-digit',
            month: '2-digit',
          }),
          proteine: 0,
          calorie: 0,
          ferro: 0,
          calcio: 0,
        });
      }
    }
    return ultimiGiorni;
  }, [giornate]);

  // Rendering condizionale basato su vista attiva
  const renderVista = () => {
    switch (vistaAttiva) {
      case 'oggi':
        return renderVistaOggi();
      case 'storico':
        return renderVistaStorico();
      case 'grafici':
        return renderVistaGrafici();
      case 'export':
        return renderVistaExport();
      default:
        return renderVistaOggi();
    }
  };

  // ========== RENDER VISTE ==========
  const renderVistaOggi = () => (
    <div className='space-y-4'>
      {/* Navigazione giorno */}
      <div className='bg-white rounded-xl shadow-md p-4'>
        <div className='flex items-center justify-between'>
          <button
            onClick={() => cambiaGiorno(-1)}
            className='p-2 hover:bg-gray-100 rounded-lg transition'
          >
            <ChevronLeft size={24} />
          </button>

          <div className='text-center'>
            <div className='text-2xl font-bold text-blue-600'>
              {new Date(dataCorrente).toLocaleDateString('it-IT', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </div>
            <button
              onClick={copiaGiornoPrecedente}
              className='text-sm text-blue-500 hover:text-blue-700 mt-1'
            >
              📋 Copia giorno precedente
            </button>
          </div>

          <button
            onClick={() => cambiaGiorno(1)}
            className='p-2 hover:bg-gray-100 rounded-lg transition'
            disabled={dataCorrente >= new Date().toISOString().split('T')[0]}
          >
            <ChevronRight size={24} />
          </button>
        </div>
      </div>

      {/* Obiettivi */}
      <div className='bg-white rounded-xl shadow-md p-6'>
        <h3 className='text-xl font-bold mb-4'>⚙️ Obiettivi Giornalieri</h3>
        <div className='grid grid-cols-2 gap-4 mb-4'>
          <div>
            <label className='block text-sm font-medium mb-2'>Peso (kg)</label>
            <input
              type='number'
              value={peso}
              onChange={(e) => setPeso(parseFloat(e.target.value))}
              className='w-full px-4 py-2 border border-gray-300 rounded-lg'
            />
          </div>
          <div>
            <label className='block text-sm font-medium mb-2'>
              Livello Attività
            </label>
            <select
              value={livelloAttivita}
              onChange={(e) => setLivelloAttivita(parseFloat(e.target.value))}
              className='w-full px-4 py-2 border border-gray-300 rounded-lg'
            >
              <option value={1.2}>Sedentario</option>
              <option value={1.375}>Leggero</option>
              <option value={1.55}>Moderato</option>
              <option value={1.725}>Intenso</option>
              <option value={1.9}>Molto intenso</option>
            </select>
          </div>
        </div>

        {obiettivi && (
          <div className='grid grid-cols-4 gap-3 text-sm'>
            <div className='bg-blue-50 p-3 rounded-lg'>
              <div className='font-semibold'>Proteine</div>
              <div className='text-xl font-bold text-blue-600'>
                {obiettivi.proteine.toFixed(0)}g
              </div>
            </div>
            <div className='bg-green-50 p-3 rounded-lg'>
              <div className='font-semibold'>Carbo</div>
              <div className='text-xl font-bold text-green-600'>
                {obiettivi.carboidrati.toFixed(0)}g
              </div>
            </div>
            <div className='bg-yellow-50 p-3 rounded-lg'>
              <div className='font-semibold'>Grassi</div>
              <div className='text-xl font-bold text-yellow-600'>
                {obiettivi.grassi.toFixed(0)}g
              </div>
            </div>
            <div className='bg-purple-50 p-3 rounded-lg'>
              <div className='font-semibold'>Calorie</div>
              <div className='text-xl font-bold text-purple-600'>
                {obiettivi.calorie.toFixed(0)}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Progressi */}
      {obiettivi && (
        <div className='bg-white rounded-xl shadow-md p-6'>
          <h3 className='text-xl font-bold mb-4'>📊 Progressi Giornalieri</h3>

          {/* Alert complementarità */}
          {totaliGiornalieri.proteineComplementarita > 0 && (
            <div className='bg-green-50 border border-green-200 rounded-lg p-4 mb-4'>
              <div className='font-semibold text-green-800'>
                🎯 Complementarità Proteica Attiva!
              </div>
              <div className='text-sm text-green-700 mt-1'>
                Proteine base: {totaliGiornalieri.proteine.toFixed(1)}g + Bonus
                complementarità:{' '}
                {totaliGiornalieri.proteineComplementarita.toFixed(1)}g =
                <span className='font-bold'>
                  {' '}
                  {totaliGiornalieri.proteineEffettive.toFixed(1)}g totali
                </span>
                (
                {(
                  (totaliGiornalieri.proteineComplementarita /
                    totaliGiornalieri.proteine) *
                  100
                ).toFixed(0)}
                % in più!)
              </div>
            </div>
          )}

          <div className='space-y-3'>
            {[
              {
                nome: 'Proteine',
                key: 'proteineEffettive',
                unita: 'g',
                obiettivo: obiettivi.proteine,
              },
              {
                nome: 'Carboidrati',
                key: 'carboidrati',
                unita: 'g',
                obiettivo: obiettivi.carboidrati,
              },
              {
                nome: 'Grassi',
                key: 'grassi',
                unita: 'g',
                obiettivo: obiettivi.grassi,
              },
              {
                nome: 'Calorie',
                key: 'calorie',
                unita: '',
                obiettivo: obiettivi.calorie,
              },
              {
                nome: 'Fibre',
                key: 'fibre',
                unita: 'g',
                obiettivo: obiettivi.fibre,
              },
              {
                nome: 'Ferro',
                key: 'ferro',
                unita: 'mg',
                obiettivo: obiettivi.ferro,
              },
              {
                nome: 'Calcio',
                key: 'calcio',
                unita: 'mg',
                obiettivo: obiettivi.calcio,
              },
              {
                nome: 'Vitamina B12',
                key: 'vitB12',
                unita: 'µg',
                obiettivo: obiettivi.vitB12,
              },
              {
                nome: 'Vitamina D',
                key: 'vitD',
                unita: 'µg',
                obiettivo: obiettivi.vitD,
              },
              {
                nome: 'Omega-3',
                key: 'omega3',
                unita: 'g',
                obiettivo: obiettivi.omega3,
              },
            ].map(({ nome, key, unita, obiettivo }) => {
              const valore = totaliGiornalieri[key];
              const percentuale = (valore / obiettivo) * 100;
              let colore = 'bg-red-500';
              if (percentuale >= 90 && percentuale <= 110)
                colore = 'bg-green-500';
              else if (percentuale >= 70) colore = 'bg-yellow-500';
              else if (percentuale > 110) colore = 'bg-orange-500';

              return (
                <div key={key}>
                  <div className='flex justify-between text-sm mb-1'>
                    <span className='font-medium'>{nome}</span>
                    <span className='font-bold'>
                      {valore.toFixed(1)}
                      {unita} / {obiettivo.toFixed(0)}
                      {unita}
                      <span
                        className={`ml-2 ${
                          percentuale >= 90 ? 'text-green-600' : 'text-red-600'
                        }`}
                      >
                        ({percentuale.toFixed(0)}%)
                      </span>
                    </span>
                  </div>
                  <div className='w-full bg-gray-200 rounded-full h-3 overflow-hidden'>
                    <div
                      className={`h-full ${colore} transition-all duration-500`}
                      style={{ width: `${Math.min(percentuale, 100)}%` }}
                    />
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Pasti */}
      {[
        'colazione',
        'spuntinoMattina',
        'pranzo',
        'spuntinoPomeriggio',
        'cena',
      ].map((pasto) => (
        <div key={pasto} className='bg-white rounded-xl shadow-md p-6'>
          <div className='flex justify-between items-center mb-4'>
            <h3 className='text-xl font-bold capitalize'>
              {pasto === 'spuntinoMattina'
                ? 'Spuntino Mattina'
                : pasto === 'spuntinoPomeriggio'
                ? 'Spuntino Pomeriggio'
                : pasto}
            </h3>
            <div className='flex gap-2'>
              <button
                onClick={() => {
                  setPastoSelezionato(pasto);
                  setModalAperto('alimento');
                }}
                className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2'
              >
                <Plus size={20} /> Alimento
              </button>
              <button
                onClick={() => {
                  setPastoSelezionato(pasto);
                  setModalAperto('integratore');
                }}
                className='px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center gap-2'
              >
                <Package size={20} /> Integratore
              </button>
              <button
                onClick={() => {
                  setPastoSelezionato(pasto);
                  setModalAperto('ricetta');
                }}
                className='px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700'
                title='Carica ricetta'
              >
                📖
              </button>
            </div>
          </div>

          {/* Lista alimenti */}
          {giornataCorrente.pasti[pasto].length === 0 ? (
            <div className='text-gray-400 text-center py-8'>
              Nessun alimento aggiunto
            </div>
          ) : (
            <div className='space-y-2'>
              {giornataCorrente.pasti[pasto].map((alimento, idx) => (
                <div
                  key={idx}
                  className='flex justify-between items-center bg-gray-50 p-3 rounded-lg'
                >
                  <div>
                    <div className='font-semibold'>{alimento.nome}</div>
                    <div className='text-sm text-gray-600'>
                      {alimento.quantita}g • {alimento.calorie.toFixed(0)} kcal
                      • P: {alimento.proteine.toFixed(1)}g C:{' '}
                      {alimento.carboidrati.toFixed(1)}g G:{' '}
                      {alimento.grassi.toFixed(1)}g
                    </div>
                  </div>
                  <button
                    onClick={() => rimuoviAlimento(pasto, idx)}
                    className='text-red-500 hover:text-red-700'
                  >
                    <Trash2 size={20} />
                  </button>
                </div>
              ))}
            </div>
          )}

          {/* Lista integratori */}
          {giornataCorrente.integratori[pasto].length > 0 && (
            <div className='mt-4 pt-4 border-t border-gray-200'>
              <div className='text-sm font-semibold text-purple-600 mb-2'>
                💊 Integratori
              </div>
              <div className='space-y-2'>
                {giornataCorrente.integratori[pasto].map((integratore, idx) => (
                  <div
                    key={idx}
                    className='flex justify-between items-center bg-purple-50 p-2 rounded-lg'
                  >
                    <div className='text-sm'>{integratore.nome}</div>
                    <button
                      onClick={() => {
                        setGiornate((prev) => ({
                          ...prev,
                          [dataCorrente]: {
                            ...giornataCorrente,
                            integratori: {
                              ...giornataCorrente.integratori,
                              [pasto]: giornataCorrente.integratori[
                                pasto
                              ].filter((_, i) => i !== idx),
                            },
                          },
                        }));
                      }}
                      className='text-red-500 hover:text-red-700'
                    >
                      <X size={16} />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );

  const renderVistaStorico = () => {
    const giorniConDati = Object.keys(giornate).sort().reverse().slice(0, 30);

    return (
      <div className='bg-white rounded-xl shadow-md p-6'>
        <h2 className='text-2xl font-bold mb-6'>📅 Storico Giornate</h2>

        {giorniConDati.length === 0 ? (
          <div className='text-center text-gray-400 py-12'>
            Nessuna giornata registrata
          </div>
        ) : (
          <div className='space-y-4'>
            {giorniConDati.map((data) => {
              const giornata = giornate[data];
              const totaliAlimenti = Object.values(giornata.pasti).flat()
                .length;

              // Calcola totali rapidi
              let totCal = 0,
                totProt = 0;
              Object.values(giornata.pasti).forEach((pasto) => {
                pasto.forEach((alimento) => {
                  totCal += alimento.calorie || 0;
                  totProt += alimento.proteine || 0;
                });
              });

              return (
                <div
                  key={data}
                  onClick={() => {
                    setDataCorrente(data);
                    setVistaAttiva('oggi');
                  }}
                  className='border border-gray-200 rounded-lg p-4 hover:bg-blue-50 cursor-pointer transition'
                >
                  <div className='flex justify-between items-center'>
                    <div>
                      <div className='font-bold text-lg'>
                        {new Date(data).toLocaleDateString('it-IT', {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                        })}
                      </div>
                      <div className='text-sm text-gray-600 mt-1'>
                        {totaliAlimenti} alimenti • {totCal.toFixed(0)} kcal •{' '}
                        {totProt.toFixed(1)}g proteine
                      </div>
                    </div>
                    <ChevronRight className='text-gray-400' />
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    );
  };

  const renderVistaGrafici = () => (
    <div className='space-y-6'>
      <div className='bg-white rounded-xl shadow-md p-6'>
        <h2 className='text-2xl font-bold mb-6'>
          📈 Andamento Ultimi 7 Giorni
        </h2>

        {datiGrafici.every((d) => d.calorie === 0) ? (
          <div className='text-center text-gray-400 py-12'>
            Nessun dato disponibile per i grafici
          </div>
        ) : (
          <>
            {/* Grafico Proteine */}
            <div className='mb-8'>
              <h3 className='text-lg font-semibold mb-4'>💪 Proteine</h3>
              <ResponsiveContainer width='100%' height={250}>
                <LineChart data={datiGrafici}>
                  <CartesianGrid strokeDasharray='3 3' />
                  <XAxis dataKey='data' />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type='monotone'
                    dataKey='proteine'
                    stroke='#3B82F6'
                    strokeWidth={2}
                    name='Proteine (g)'
                  />
                  {obiettivi && (
                    <Line
                      type='monotone'
                      dataKey={() => obiettivi.proteine}
                      stroke='#EF4444'
                      strokeDasharray='5 5'
                      name='Obiettivo'
                    />
                  )}
                </LineChart>
              </ResponsiveContainer>
            </div>

            {/* Grafico Calorie */}
            <div className='mb-8'>
              <h3 className='text-lg font-semibold mb-4'>🔥 Calorie</h3>
              <ResponsiveContainer width='100%' height={250}>
                <BarChart data={datiGrafici}>
                  <CartesianGrid strokeDasharray='3 3' />
                  <XAxis dataKey='data' />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey='calorie' fill='#10B981' name='Calorie' />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Grafico Minerali */}
            <div>
              <h3 className='text-lg font-semibold mb-4'>⚡ Minerali</h3>
              <ResponsiveContainer width='100%' height={250}>
                <LineChart data={datiGrafici}>
                  <CartesianGrid strokeDasharray='3 3' />
                  <XAxis dataKey='data' />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type='monotone'
                    dataKey='ferro'
                    stroke='#EF4444'
                    strokeWidth={2}
                    name='Ferro (mg)'
                  />
                  <Line
                    type='monotone'
                    dataKey='calcio'
                    stroke='#8B5CF6'
                    strokeWidth={2}
                    name='Calcio (mg)'
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </>
        )}
      </div>
    </div>
  );

  const renderVistaExport = () => (
    <div className='bg-white rounded-xl shadow-md p-6'>
      <h2 className='text-2xl font-bold mb-6'>💾 Esporta / Importa Dati</h2>

      <div className='space-y-6'>
        {/* Export */}
        <div>
          <h3 className='text-lg font-semibold mb-4'>📤 Esporta Dati</h3>
          <div className='space-y-3'>
            <button
              onClick={exportJSON}
              className='w-full px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center justify-center gap-3 text-lg'
            >
              <FileDown size={24} />
              Esporta tutto in JSON
            </button>

            <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>
              <div className='text-sm text-blue-800'>
                <div className='font-semibold mb-2'>
                  📋 Cosa viene esportato:
                </div>
                <ul className='list-disc list-inside space-y-1'>
                  <li>Tutte le giornate registrate</li>
                  <li>Obiettivi personalizzati (peso, livello attività)</li>
                  <li>Ricette salvate</li>
                  <li>Data e ora dell'esportazione</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Import */}
        <div>
          <h3 className='text-lg font-semibold mb-4'>📥 Importa Dati</h3>
          <div className='space-y-3'>
            <label className='w-full block'>
              <div className='w-full px-6 py-4 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center justify-center gap-3 text-lg cursor-pointer'>
                <Upload size={24} />
                Importa da file JSON
              </div>
              <input
                type='file'
                accept='.json'
                onChange={importJSON}
                className='hidden'
              />
            </label>

            <div className='bg-yellow-50 border border-yellow-200 rounded-lg p-4'>
              <div className='text-sm text-yellow-800'>
                <div className='font-semibold mb-2'>⚠️ Attenzione:</div>
                <p>
                  L'importazione sovrascriverà tutti i dati attuali. Assicurati
                  di aver fatto un backup prima di procedere.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Statistiche */}
        <div>
          <h3 className='text-lg font-semibold mb-4'>
            📊 Statistiche Database
          </h3>
          <div className='grid grid-cols-3 gap-4'>
            <div className='bg-gray-50 p-4 rounded-lg'>
              <div className='text-3xl font-bold text-blue-600'>
                {Object.keys(giornate).length}
              </div>
              <div className='text-sm text-gray-600'>Giornate registrate</div>
            </div>
            <div className='bg-gray-50 p-4 rounded-lg'>
              <div className='text-3xl font-bold text-green-600'>
                {Object.keys(ricetteSalvate).length}
              </div>
              <div className='text-sm text-gray-600'>Ricette salvate</div>
            </div>
            <div className='bg-gray-50 p-4 rounded-lg'>
              <div className='text-3xl font-bold text-purple-600'>
                {Object.values(giornate).reduce(
                  (sum, g) => sum + Object.values(g.pasti).flat().length,
                  0
                )}
              </div>
              <div className='text-sm text-gray-600'>Alimenti totali</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // ========== MODALI ==========
  return (
    <div className='min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4'>
      <div className='max-w-7xl mx-auto'>
        {/* Header */}
        <div className='bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl shadow-xl p-6 mb-6 text-white'>
          <h1 className='text-4xl font-bold mb-2'>
            🌱 Vegan Nutrition Tracker PRO
          </h1>
          <p className='text-green-100'>
            Con Complementarità Proteica, Storico, Grafici e Export
          </p>
        </div>

        {/* Navigazione Tab */}
        <div className='bg-white rounded-xl shadow-md p-2 mb-6'>
          <div className='flex gap-2'>
            {[
              { id: 'oggi', icon: Calendar, label: 'Oggi' },
              { id: 'storico', icon: TrendingUp, label: 'Storico' },
              { id: 'grafici', icon: BarChart3, label: 'Grafici' },
              { id: 'export', icon: Download, label: 'Export' },
            ].map(({ id, icon: Icon, label }) => (
              <button
                key={id}
                onClick={() => setVistaAttiva(id)}
                className={`flex-1 px-6 py-3 rounded-lg font-semibold flex items-center justify-center gap-2 transition ${
                  vistaAttiva === id
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                <Icon size={20} />
                {label}
              </button>
            ))}
          </div>
        </div>

        {/* Contenuto */}
        {renderVista()}

        {/* Modal Aggiungi Alimento */}
        {modalAperto === 'alimento' && (
          <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>
            <div className='bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6'>
              <div className='flex justify-between items-center mb-6'>
                <h2 className='text-2xl font-bold'>Aggiungi Alimento</h2>
                <button
                  onClick={() => setModalAperto(null)}
                  className='text-gray-400 hover:text-gray-600'
                >
                  <X size={24} />
                </button>
              </div>

              <div className='space-y-4'>
                <div>
                  <label className='block text-sm font-medium mb-2'>
                    Pasto
                  </label>
                  <select
                    value={pastoSelezionato}
                    onChange={(e) => setPastoSelezionato(e.target.value)}
                    className='w-full px-4 py-2 border border-gray-300 rounded-lg'
                  >
                    <option value='colazione'>Colazione</option>
                    <option value='spuntinoMattina'>Spuntino Mattina</option>
                    <option value='pranzo'>Pranzo</option>
                    <option value='spuntinoPomeriggio'>
                      Spuntino Pomeriggio
                    </option>
                    <option value='cena'>Cena</option>
                  </select>
                </div>

                <div>
                  <label className='block text-sm font-medium mb-2'>
                    Alimento
                  </label>
                  <select
                    value={alimentoSelezionato}
                    onChange={(e) => setAlimentoSelezionato(e.target.value)}
                    className='w-full px-4 py-2 border border-gray-300 rounded-lg'
                  >
                    <option value=''>-- Seleziona --</option>
                    {Object.keys(ALIMENTI_DATABASE).map((nome) => (
                      <option key={nome} value={nome}>
                        {nome}
                      </option>
                    ))}
                  </select>
                </div>

                {alimentoSelezionato && (
                  <>
                    <div>
                      <label className='block text-sm font-medium mb-2'>
                        Quantità (grammi)
                      </label>
                      <div className='flex gap-2'>
                        <input
                          type='number'
                          value={quantita}
                          onChange={(e) => setQuantita(e.target.value)}
                          className='flex-1 px-4 py-2 border border-gray-300 rounded-lg'
                          placeholder='es. 100'
                        />
                        <button
                          onClick={() =>
                            setQuantita(
                              ALIMENTI_DATABASE[
                                alimentoSelezionato
                              ].porzione.toString()
                            )
                          }
                          className='px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300'
                        >
                          Usa porzione (
                          {ALIMENTI_DATABASE[alimentoSelezionato].porzione}g)
                        </button>
                      </div>
                    </div>

                    {quantita && (
                      <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>
                        <div className='font-semibold mb-2'>
                          📊 Anteprima Nutrienti:
                        </div>
                        <div className='grid grid-cols-2 gap-2 text-sm'>
                          {(() => {
                            const alimento =
                              ALIMENTI_DATABASE[alimentoSelezionato];
                            const fattore = parseFloat(quantita) / 100;
                            return (
                              <>
                                <div>
                                  Proteine:{' '}
                                  <span className='font-bold'>
                                    {(alimento.proteine * fattore).toFixed(1)}g
                                  </span>
                                </div>
                                <div>
                                  Carboidrati:{' '}
                                  <span className='font-bold'>
                                    {(alimento.carboidrati * fattore).toFixed(
                                      1
                                    )}
                                    g
                                  </span>
                                </div>
                                <div>
                                  Grassi:{' '}
                                  <span className='font-bold'>
                                    {(alimento.grassi * fattore).toFixed(1)}g
                                  </span>
                                </div>
                                <div>
                                  Calorie:{' '}
                                  <span className='font-bold'>
                                    {(alimento.calorie * fattore).toFixed(0)}
                                  </span>
                                </div>
                              </>
                            );
                          })()}
                        </div>
                      </div>
                    )}
                  </>
                )}

                <div className='flex gap-3 pt-4'>
                  <button
                    onClick={aggiungiAlimento}
                    disabled={!alimentoSelezionato || !quantita}
                    className='flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed font-semibold'
                  >
                    <Check className='inline mr-2' size={20} />
                    Aggiungi
                  </button>
                  <button
                    onClick={() => {
                      setPastoSelezionato(pastoSelezionato);
                      setModalAperto('salvaRicetta');
                    }}
                    className='px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold'
                  >
                    <Save className='inline mr-2' size={20} />
                    Salva come Ricetta
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Modal Aggiungi Integratore */}
        {modalAperto === 'integratore' && (
          <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>
            <div className='bg-white rounded-2xl shadow-2xl max-w-lg w-full p-6'>
              <div className='flex justify-between items-center mb-6'>
                <h2 className='text-2xl font-bold'>💊 Aggiungi Integratore</h2>
                <button
                  onClick={() => setModalAperto(null)}
                  className='text-gray-400 hover:text-gray-600'
                >
                  <X size={24} />
                </button>
              </div>

              <div className='space-y-4'>
                <div>
                  <label className='block text-sm font-medium mb-2'>
                    Integratore
                  </label>
                  <select
                    value={integratoreSel}
                    onChange={(e) => setIntegratoreSel(e.target.value)}
                    className='w-full px-4 py-2 border border-gray-300 rounded-lg'
                  >
                    <option value=''>-- Seleziona --</option>
                    {Object.keys(INTEGRATORI_DATABASE).map((nome) => (
                      <option key={nome} value={nome}>
                        {nome}
                      </option>
                    ))}
                  </select>
                </div>

                <button
                  onClick={aggiungiIntegratore}
                  disabled={!integratoreSel}
                  className='w-full px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-300 disabled:cursor-not-allowed font-semibold'
                >
                  <Check className='inline mr-2' size={20} />
                  Aggiungi
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Modal Salva Ricetta */}
        {modalAperto === 'salvaRicetta' && (
          <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>
            <div className='bg-white rounded-2xl shadow-2xl max-w-lg w-full p-6'>
              <div className='flex justify-between items-center mb-6'>
                <h2 className='text-2xl font-bold'>💾 Salva Ricetta</h2>
                <button
                  onClick={() => setModalAperto(null)}
                  className='text-gray-400 hover:text-gray-600'
                >
                  <X size={24} />
                </button>
              </div>

              <div className='space-y-4'>
                <div>
                  <label className='block text-sm font-medium mb-2'>
                    Nome Ricetta
                  </label>
                  <input
                    type='text'
                    value={nomeRicetta}
                    onChange={(e) => setNomeRicetta(e.target.value)}
                    className='w-full px-4 py-2 border border-gray-300 rounded-lg'
                    placeholder='es. Pasta e Fagioli'
                  />
                </div>

                <button
                  onClick={salvaRicetta}
                  disabled={!nomeRicetta}
                  className='w-full px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed font-semibold'
                >
                  <Save className='inline mr-2' size={20} />
                  Salva
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Modal Carica Ricetta */}
        {modalAperto === 'ricetta' && (
          <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>
            <div className='bg-white rounded-2xl shadow-2xl max-w-lg w-full p-6'>
              <div className='flex justify-between items-center mb-6'>
                <h2 className='text-2xl font-bold'>📖 Carica Ricetta</h2>
                <button
                  onClick={() => setModalAperto(null)}
                  className='text-gray-400 hover:text-gray-600'
                >
                  <X size={24} />
                </button>
              </div>

              {Object.keys(ricetteSalvate).length === 0 ? (
                <div className='text-center text-gray-400 py-8'>
                  Nessuna ricetta salvata
                </div>
              ) : (
                <div className='space-y-2'>
                  {Object.keys(ricetteSalvate).map((nome) => (
                    <button
                      key={nome}
                      onClick={() => caricaRicetta(nome)}
                      className='w-full px-4 py-3 bg-gray-100 hover:bg-green-100 rounded-lg text-left transition'
                    >
                      <div className='font-semibold'>{nome}</div>
                      <div className='text-sm text-gray-600'>
                        {ricetteSalvate[nome].length} alimenti
                      </div>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VeganNutritionTrackerComplete;
